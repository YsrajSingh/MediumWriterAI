services:
  application:
    build:
      context: .
      dockerfile: ./docker/Dockerfile
    container_name: application
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - postgres
    networks:
      - backend_network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - backend_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    ports:
      - "${PGADMIN_PORT}:5050"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_ENABLE_PASSWORD_RECOVERY: 'True'
    volumes:
        - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - backend_network
    depends_on:
      - postgres

networks:
  backend_network:
    driver: bridge

volumes:
  pgdata:
  pgadmin_data:
